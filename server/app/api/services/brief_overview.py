from app.validation import get_sections


class BriefOverviewService():
    # Text for links on the brief overview page
    ANSWER_QUESTION_TEXT = 'Answer a question'
    BRIEF_WINDOW_TEXT = 'How long your brief will be open'
    DESCRIPTION_OF_WORK_TEXT = 'Description of work'
    EDIT_WORK_ORDER_TEXT = 'Edit work order'
    EVALUATION_TEMPLATE_TEXT = 'Evaluation template (XLSX 13KB)'
    LOCATION_TEXT = 'Location'
    PUBLISH_TEXT = 'Review and publish your requirements'
    QUESTION_AND_ANSWER_TEXT = 'Question and answer session details'
    ROLE_TEXT = 'Role'
    SHORTLIST_AND_EVALUATION_TEXT = 'Shortlist and evaluation process'
    START_WORK_ORDER_TEXT = 'Start a work order'
    TITLE_TEXT = 'Title'
    VIEW_RESPONSES_TEXT = 'View responses'
    WHO_CAN_RESPOND_TEXT = 'Who can respond'

    # Text for sections on the brief overview page
    EVALUATION_SECTION_TEXT = 'Evaluate specialists'
    LIVE_SECTION_TEXT = 'While the opportunity is live'
    PUBLISH_SECTION_TEXT = 'Publish your brief'
    SHORTLIST_SECTION_TEXT = 'Shortlist responses'
    WORK_ORDER_SECTION_TEXT = 'Work order'

    PATHS = {
        ANSWER_QUESTION_TEXT: '{path}/supplier-questions/answer-question',
        BRIEF_WINDOW_TEXT: '{path}/edit/how-long-your-brief-will-be-open/requirementsLength',
        DESCRIPTION_OF_WORK_TEXT: '{path}/description-of-work',
        EDIT_WORK_ORDER_TEXT: '/work-orders/{work_order_id}',
        EVALUATION_TEMPLATE_TEXT: '/static/media/documents/Scoring_Template.xlsx',
        LOCATION_TEXT: '{path}/edit/location/location',
        PUBLISH_TEXT: '{path}/publish',
        QUESTION_AND_ANSWER_TEXT: '{path}/question-and-answer-session-details',
        ROLE_TEXT: '{path}/edit/role/title',
        SHORTLIST_AND_EVALUATION_TEXT: '{path}/shortlist-and-evaluation-process',
        START_WORK_ORDER_TEXT: '{path}/work-orders/create',
        TITLE_TEXT: '{path}/edit/title/title',
        VIEW_RESPONSES_TEXT: '{path}/responses',
        WHO_CAN_RESPOND_TEXT: '{path}/edit/who-can-respond/specifySeller'
    }

    def get_path_for_brief_link(self, brief, link_text):
        path = '/buyers/frameworks/{}/requirements/{}/{}'.format(brief.framework.slug, brief.lot.slug, brief.id)
        work_order_id = brief.work_order.id if brief.work_order else None

        return self.PATHS[link_text].format(path=path, work_order_id=work_order_id)

    def brief_contains_all_required_fields(self, brief, required_fields):
        for key in required_fields:
            if not brief.data.get(key):
                return False

        return True

    def brief_contains_any_optional_fields(self, brief, optional_fields):
        for key in optional_fields:
            if brief.data.get(key):
                return True

        return False

    def is_brief_section_complete(self, brief, section):
        if section['required']:
            return self.brief_contains_all_required_fields(brief, section['required'])
        else:
            return self.brief_contains_any_optional_fields(brief, section['optional'])

    def get_publish_links(self, brief):
        links = []
        draft_brief = brief.status == 'draft'

        # Get the sections key from the JSON schema generated by the frameworks repo
        schema_sections = get_sections('briefs-{}-{}'.format(brief.framework.slug, brief.lot.slug))

        for section in schema_sections:
            path = self.get_path_for_brief_link(brief, section['name']) if draft_brief else None
            links.append(self.build_brief_link(self.is_brief_section_complete(brief, section), path, section['name']))

        # Review and publish is complete if the buyer has completed all sections and published
        publish_completed = all([link['complete'] for link in links]) and not draft_brief
        publish_path = self.get_path_for_brief_link(brief, self.PUBLISH_TEXT) if draft_brief else None
        links.append(self.build_brief_link(publish_completed, publish_path, self.PUBLISH_TEXT))

        return links

    def get_live_links(self, brief):
        links = []

        # Answer a question is complete if the brief is closed
        answer_question_path = (
            self.get_path_for_brief_link(brief, self.ANSWER_QUESTION_TEXT) if brief.status == 'live' else None)
        links.append(self.build_brief_link(brief.status == 'closed', answer_question_path, self.ANSWER_QUESTION_TEXT))
        return links

    def get_shortlist_links(self, brief):
        links = []

        view_responses_path = (self.get_path_for_brief_link(brief, self.VIEW_RESPONSES_TEXT)
                               if brief.status == 'closed' else None)
        links.append(self.build_brief_link(False, view_responses_path, self.VIEW_RESPONSES_TEXT))
        return links

    def get_evaluation_links(self, brief):
        links = []

        # No green tick needed for evaluation template
        links.append(self.build_brief_link(False, self.get_path_for_brief_link(brief, self.EVALUATION_TEMPLATE_TEXT),
                                           self.EVALUATION_TEMPLATE_TEXT))
        return links

    def get_work_order_links(self, brief):
        links = []

        # No need for green ticks to indicate completion
        if brief.work_order:
            links.append(self.build_brief_link(False, self.get_path_for_brief_link(brief, self.EDIT_WORK_ORDER_TEXT),
                                               self.EDIT_WORK_ORDER_TEXT))
        else:
            start_work_order_path = (self.get_path_for_brief_link(brief, self.START_WORK_ORDER_TEXT)
                                     if brief.status == 'closed' else None)
            links.append(self.build_brief_link(False, start_work_order_path, self.START_WORK_ORDER_TEXT))

        return links

    def build_brief_link(self, complete, path, text):
        return {
            'complete': complete,
            'path': path,
            'text': text
        }

    def build_section(self, links, title):
        return {
            'links': links,
            'title': title
        }

    def get_sections(self, brief):
        sections = []
        sections.append(self.build_section(self.get_publish_links(brief), self.PUBLISH_SECTION_TEXT))
        sections.append(self.build_section(self.get_live_links(brief), self.LIVE_SECTION_TEXT))
        sections.append(self.build_section(self.get_shortlist_links(brief), self.SHORTLIST_SECTION_TEXT))

        if brief.lot.slug == 'digital-professionals':
            sections.append(self.build_section(self.get_evaluation_links(brief), self.EVALUATION_SECTION_TEXT))
            sections.append(self.build_section(self.get_work_order_links(brief), self.WORK_ORDER_SECTION_TEXT))

        return sections
